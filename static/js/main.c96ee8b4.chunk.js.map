{"version":3,"sources":["pages/HomePage.jsx","pages/AlphaBlog/AlphaBlog.jsx","App.js","serviceWorker.js","index.js","pages/AlphaBlog/alpha-blog1.png","pages/AlphaBlog/alpha-blog2.png"],"names":["HomePage","className","to","images","source","alphaImage1","alphaImage2","AlphaBlog","href","target","views","App","basename","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8NAyBeA,MAlBf,WACE,OACE,6BACE,yBAAKC,UAAU,OACb,8DACA,yHAEF,yBAAKA,UAAU,sCACb,4BACE,4BAAI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,eAAT,gBACR,4BAAI,4CACJ,4BAAI,6C,0CCPRC,EAAS,CAAC,CAAEC,OAAQC,KAAc,CAACD,OAAQE,MAqBlCC,MAnBf,WACE,OACE,6BACE,yBAAKN,UAAU,OACb,0CACA,2BAAG,uBAAGO,KAAK,0CAA0CC,OAAO,UAAzD,6BACH,6HAES,uBAAGD,KAAK,4EAA4EC,OAAO,UAA3F,+CAFT,KAKA,4BAAI,kBAAC,IAAD,CAAMP,GAAG,KAAT,WACJ,4CACA,kBAAC,IAAD,CAAUQ,MAAOP,OCLVQ,E,uKATX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOc,KAAK,cAAcC,UAAWR,S,GAL3BS,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6DEzI5BC,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.c96ee8b4.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\nimport '../List.css';\n\nfunction HomePage() {\n  return (\n    <div>\n      <div className=\"App\">\n        <h1>Meus repositórios do GitHub</h1>\n        <h2>Este SPA foi criado em React para práticar e tem como objetivo resumir meus projetos:</h2>\n      </div>\n      <div className='List col-xs-12 col-sm-12 col-md-12'>\n        <ul>\n          <li><h4><Link to=\"/alpha-blog\">Alpha Blog</Link></h4></li>\n          <li><h4>Calculadora</h4></li>\n          <li><h4>Cookbook</h4></li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../App.css';\nimport '../../List.css';\n\nimport Carousel from 'react-images';\nimport alphaImage1 from './alpha-blog1.png'\nimport alphaImage2 from './alpha-blog2.png'\n\nconst images = [{ source: alphaImage1}, {source: alphaImage2 }];\n\nfunction AlphaBlog() {\n  return (\n    <div>\n      <div className='App'>\n        <h1>Alpha Blog</h1>\n        <p><a href='https://github.com/kendyhiga/alpha-blog' target='_blank'>[Link do Repositório]</a></p>\n        <span>Este projeto em Ruby on Rails consiste\n          num blog, que foi criado a partir do curso da\n          Udemy: <a href='https://www.udemy.com/course/the-complete-ruby-on-rails-developer-course/' target='_blank'>\n            The Complete Ruby on Rails Developer Course</a>.\n        </span>\n        <h4><Link to=\"/\">Voltar</Link></h4>\n        <h4>Screenshots:</h4>\n        <Carousel views={images} />\n      </div>\n    </div>\n  );\n}\n\nexport default AlphaBlog;\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './List.css';\n\nimport HomePage from './pages/HomePage'\nimport AlphaBlog from './pages/AlphaBlog/AlphaBlog'\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/alpha-blog\" component={AlphaBlog} />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alpha-blog1.28b41a42.png\";","module.exports = __webpack_public_path__ + \"static/media/alpha-blog2.8be5b8ef.png\";"],"sourceRoot":""}